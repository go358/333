
=== –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï ===

–ü—Ä–æ–µ–∫—Ç: Telegram-–±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã
–¶–µ–ª—å: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ö–ª–∏–µ–Ω—Ç:
  - /start ‚Äî –º–µ–Ω—é
  - –ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É (FSM)
  - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (FSM)
  - –ù–∞–ø–∏—Å–∞—Ç—å –º–∞—Å—Ç–µ—Ä—É (—á–∞—Ç)

- –ú–∞—Å—Ç–µ—Ä:
  - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π
  - –û—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–µ
  - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤

- –ê–¥–º–∏–Ω:
  - –î–æ—Å—Ç—É–ø –ø–æ ADMIN_ID
  - –ü–∞–Ω–µ–ª—å —Å –º–µ–Ω—é, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, —Ä–∞—Å—Å—ã–ª–∫–æ–π

- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:
  - aiogram, FSM, SQLite + SQLAlchemy
  - run.py ‚Äî –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∏ –∑–∞–ø—É—Å–∫
  - .env: BOT_TOKEN, ADMIN_ID
  - handlers: booking, feedback, chat, admin_menu, master_menu
  - states.py ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
  - models.py ‚Äî —Ç–∞–±–ª–∏—Ü—ã User, Booking, Feedback
  - test_logic.py, test_load.py ‚Äî —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  - rezervnaya_kopiya.txt ‚Äî —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º

=== –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê ===

beauty_salon_bot_final/
‚îú‚îÄ‚îÄ run.py
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ rezervnaya_kopiya.txt
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ bot/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ config.py
‚îÇ   ‚îú‚îÄ‚îÄ db.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py
‚îÇ   ‚îú‚îÄ‚îÄ init_db.py
‚îÇ   ‚îú‚îÄ‚îÄ models.py
‚îÇ   ‚îú‚îÄ‚îÄ states.py
‚îÇ   ‚îú‚îÄ‚îÄ backup.py
‚îÇ   ‚îú‚îÄ‚îÄ handlers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ booking.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ feedback.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ chat.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin_menu.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ master_menu.py
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ test_logic.py
‚îÇ   ‚îú‚îÄ‚îÄ test_load.py

=== –ò–°–•–û–î–ù–´–ô –ö–û–î ===


--- run.py ---

import os
import subprocess

from bot.backup import make_backup

DB_PATH = 'db.sqlite3'

if not os.path.exists(DB_PATH):
    print("[INIT] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º...")
    subprocess.run(["python", "bot/init_db.py"], check=True)
else:
    make_backup()

print("[RUN] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
subprocess.run(["python", "-m", "bot.main"], check=True)



--- backup.py ---
# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î



--- healthcheck.py ---
import requests
print(requests.get('https://api.telegram.org/bot' + 'TOKEN' + '/getMe').json())



--- bot/__init__.py ---




--- bot/config.py ---
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
DB_PATH = 'db.sqlite3'
BACKUP_PATH = 'backup/'
ADMIN_ID = int(os.getenv('ADMIN_ID'))



--- bot/db.py ---
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from bot.config import DB_PATH
engine = create_engine(f'sqlite:///{DB_PATH}')
SessionLocal = sessionmaker(bind=engine)



--- bot/init_db.py ---
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base

Base = declarative_base()

from sqlalchemy import Column, Integer, String, BigInteger

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    telegram_id = Column(BigInteger, unique=True, nullable=False)
    name = Column(String)
    role = Column(String, default='client')

engine = create_engine('sqlite:///db.sqlite3')
print("[INIT] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
Base.metadata.create_all(bind=engine)



--- bot/main.py ---

import asyncio
import logging
import importlib
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

from bot.config import BOT_TOKEN

dp = Dispatcher(storage=MemoryStorage())

modules = ["booking", "feedback", "chat", "admin_menu", "master_menu"]
for name in modules:
    mod = importlib.import_module(f"bot.handlers.{name}")
    dp.include_router(mod.router)

async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())



--- bot/states.py ---
from aiogram.fsm.state import StatesGroup, State

class BookingStates(StatesGroup):
    service = State()
    master = State()
    time = State()

class FeedbackStates(StatesGroup):
    rating = State()
    comment = State()

class ChatStates(StatesGroup):
    message = State()



--- bot/utils.py ---
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def back_button():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]])



--- bot/backup.py ---

import os
import shutil
from datetime import datetime
from bot.config import DB_PATH

def make_backup():
    os.makedirs("backup", exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"backup/backup_{timestamp}.sqlite3"
    shutil.copy(DB_PATH, backup_name)
    print(f"[BACKUP] –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")



--- bot/handlers/__init__.py ---
# handlers package


--- bot/handlers/booking.py ---

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from bot.states import BookingStates

router = Router()

@router.message(F.text == "/start")
async def start_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
            [KeyboardButton(text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
            [KeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–∞—Å—Ç–µ—Ä—É")],
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —É—Å–ª—É–≥—É:")
    await state.set_state(BookingStates.service)

@router.message(BookingStates.service)
async def choose_service(message: Message, state: FSMContext):
    await state.update_data(service=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:")
    await state.set_state(BookingStates.master)

@router.message(BookingStates.master)
async def choose_master(message: Message, state: FSMContext):
    await state.update_data(master=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-01 14:00):")
    await state.set_state(BookingStates.time)

@router.message(BookingStates.time)
async def confirm_booking(message: Message, state: FSMContext):
    await state.update_data(time=message.text)
    data = await state.get_data()
    await message.answer(
        f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É: {data['service']}\n"
        f"–ö –º–∞—Å—Ç–µ—Ä—É: {data['master']}\n"
        f"–ù–∞ –≤—Ä–µ–º—è: {data['time']}\n"
        "–°–ø–∞—Å–∏–±–æ!"
    )
    await state.clear()



--- bot/handlers/chat.py ---

from aiogram import Router, F
from aiogram.types import Message

router = Router()

@router.message(F.text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–∞—Å—Ç–µ—Ä—É")
async def write_to_master(message: Message):
    await message.answer("–ü–æ–∫–∞ —á–∞—Ç —Å –º–∞—Å—Ç–µ—Ä–æ–º —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ.")



--- bot/handlers/feedback.py ---

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bot.states import FeedbackStates

router = Router()

@router.message(F.text == "‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def start_feedback(message: Message, state: FSMContext):
    await message.answer("–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:")
    await state.set_state(FeedbackStates.rating)

@router.message(FeedbackStates.rating)
async def get_rating(message: Message, state: FSMContext):
    await state.update_data(rating=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.set_state(FeedbackStates.comment)

@router.message(FeedbackStates.comment)
async def save_feedback(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n–û—Ü–µ–Ω–∫–∞: {data['rating']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}")
    await state.clear()



--- bot/handlers/admin_menu.py ---

from aiogram import Router, F
from aiogram.types import Message
from bot.config import ADMIN_ID

router = Router()

@router.message(F.text == "/admin")
async def admin_start(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ä–∞—Å—Å—ã–ª–∫–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")



--- bot/handlers/master_menu.py ---

from aiogram import Router, F
from aiogram.types import Message
from bot.models import Booking, User
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

router = Router()

engine = create_engine("sqlite:///db.sqlite3")
Session = sessionmaker(bind=engine)

@router.message(F.text == "/master")
async def master_panel(message: Message):
    session = Session()
    master = session.query(User).filter(User.telegram_id == message.from_user.id, User.role == 'master').first()
    if not master:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.")
        return

    bookings = session.query(Booking).filter(Booking.master_id == master.id).all()
    if not bookings:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    else:
        text = "\n".join([f"{b.time} ‚Äî –∫–ª–∏–µ–Ω—Ç {b.client_id}" for b in bookings])
        await message.answer(f"–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n{text}")



--- tests/test_models.py ---
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è User, Booking



--- tests/test_feedback.py ---
# –ü—Ä–æ–≤–µ—Ä–∫–∞ FSM –æ—Ç–∑—ã–≤–∞



--- tests/test_logic.py ---

import unittest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from bot.models import Base, User, Booking, Feedback

class LogicTestCase(unittest.TestCase):
    def setUp(self):
        self.engine = create_engine('sqlite:///:memory:')
        Base.metadata.create_all(self.engine)
        self.Session = sessionmaker(bind=self.engine)
        self.session = self.Session()

        self.user = User(telegram_id=12345, name='Test User', role='client')
        self.master = User(telegram_id=54321, name='Test Master', role='master')
        self.session.add_all([self.user, self.master])
        self.session.commit()

    def test_booking_creation(self):
        booking = Booking(client_id=self.user.id, master_id=self.master.id, time='2025-06-01 10:00')
        self.session.add(booking)
        self.session.commit()
        self.assertEqual(self.session.query(Booking).count(), 1)
        self.assertEqual(booking.client_id, self.user.id)

    def test_feedback_creation(self):
        feedback = Feedback(client_id=self.user.id, rating=5, comment='Great!')
        self.session.add(feedback)
        self.session.commit()
        self.assertEqual(self.session.query(Feedback).count(), 1)
        self.assertEqual(feedback.rating, 5)

    def tearDown(self):
        self.session.close()
        self.engine.dispose()

if __name__ == '__main__':
    unittest.main()



--- tests/test_load.py ---

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from bot.models import Base, User, Booking, Feedback

engine = create_engine("sqlite:///:memory:")
Base.metadata.create_all(bind=engine)
Session = sessionmaker(bind=engine)
session = Session()

client = User(telegram_id=111, name="LoadTester", role="client")
master = User(telegram_id=222, name="MasterBot", role="master")
session.add_all([client, master])
session.commit()

for i in range(500):
    booking = Booking(client_id=client.id, master_id=master.id, time=f"2025-06-01 10:{i % 60:02d}")
    feedback = Feedback(client_id=client.id, rating=(i % 5) + 1, comment=f"Review {i}")
    session.add(booking)
    session.add(feedback)

session.commit()

print("üéØ –ó–∞–ø–∏—Å–µ–π:", session.query(Booking).count())
print("üí¨ –û—Ç–∑—ã–≤–æ–≤:", session.query(Feedback).count())
